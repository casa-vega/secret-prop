name: Propagate Repository Secrets
on:
  workflow_dispatch:

jobs:
  propagate-secrets:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Configure GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.PAT_TOKEN }}"
        
      - name: Get Secret Names
        id: get-secrets
        run: |
          # Get array of secret names from JSON and format for output
          SECRETS=$(jq -r 'keys[]' mapping.json | jq -R -s -c 'split("\n")[:-1]')
          echo "secrets=$SECRETS" >> $GITHUB_OUTPUT

      - name: Process Secrets
        uses: actions/github-script@v7
        env:
          # We'll use github-script to help us generate the dynamic steps
          MAPPINGS: ${{ steps.get-secrets.outputs.secrets }}
        with:
          script: |
            const secretNames = JSON.parse(process.env.MAPPINGS);
            for (const secretName of secretNames) {
              // Create a step for each secret with proper reference
              const step = {
                name: `Process ${secretName}`,
                env: {
                  [`SECRET_${secretName}`]: `\${{ secrets.${secretName} }}`
                },
                run: `
                  # Get repos for this secret
                  repos=$(jq -r --arg key "${secretName}" '.[$key][]' secret-mappings.json)
                  
                  # For each target repo, set the secret
                  echo "$repos" | while read -r repo; do
                    if [ ! -z "$repo" ]; then
                      echo "Setting ${secretName} for repository $repo"
                      echo "$SECRET_${secretName}" | gh secret set "${secretName}" --repo "$repo"
                    fi
                  done
                `
              };
              await exec.exec('bash', ['-c', step.run], { env: { [`SECRET_${secretName}`]: process.env[`SECRET_${secretName}`] } });
            }
